{% from "nginx/map.jinja" import nginx, maintenance, provider with context %}
# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

{% from 'nginx/lib.sls' import nginx_custom_log_formats_and_files %}

{% for k,v in nginx.core_module_config.iteritems() %}
  {{ k }} {{ v }};
{% endfor %}

user              nginx;


events {
  {% for k,v in nginx.main_events_context.iteritems() %}
    {{ k }} {{ v }};
  {% endfor %}
}

# on Nginx timestamp precision:
# timestamp_iso8601     2014-07-10T10:32:10+00:00
# timestamp_msec        1404988330.617
http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_x_request_id"';

    log_format logstash_json '{'
                             '"timestamp_msec": "$msec", '
                             '"@fields": { '
                             '"remote_addr": "$remote_addr", '
                             '"real_ip": "$http_x_real_ip", '
                             '"real_forwarded_for": "$http_x_forwarded_for", '
                             '"real_forwarded_proto": "$http_x_forwarded_proto", '
                             '"request_id": "$http_x_request_id", '
                             '"remote_user": "$remote_user", '
                             '"body_bytes_sent": $body_bytes_sent, '
                             '"request_time": $request_time, '
                             '"request_uri": "$request_uri", '
                             '"status": $status, '
                             '"request": "$request", '
                             '"request_method": "$request_method", '
                             '"http_referrer": "$http_referer", '
                             '"http_user_agent": "$http_user_agent", '
                             '"bytes_sent": $bytes_sent, '
                             '"gzip_ratio": "$gzip_ratio", '
                             '"http_host": "$host", '
                             '"sent_http_location": "$sent_http_location", '
                             '"server_name": "$server_name", '
                             '"server_port": "$server_port", '
                             '"ssl_protocol": "$ssl_protocol", '
                             '"ssl_cipher": "$ssl_cipher", '
                             '"ssl_client_s_dn": "$ssl_client_s_dn", '
                             '"ssl_session_id": "$ssl_session_id", '
                             '"upstream_addr": "$upstream_addr", '
                             '"upstream_response_length": "$upstream_response_length", '
                             '"upstream_response_time": "$upstream_response_time", '
                             '"upstream_status": "$upstream_status" '
                             '} }';

    {% if nginx.get('logs', False) %}
        {{ nginx_custom_log_formats_and_files(nginx.logs) }}
    {% else %}
        access_log  /var/log/nginx/access.json  logstash_json;
        error_log  /var/log/nginx/error.log error;
    {% endif %}    

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server_tokens off;
    

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    ## Compression
    gzip on;
    gzip_http_version 1.0;
    #gzip_comp_level 2;
    gzip_proxied any;
    gzip_min_length  1100;
    gzip_buffers 16 8k;
    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript; # text/html already included
    # Some version of IE 6 don't handle compression well on some mime-types, so just disable for them
    gzip_disable "MSIE [1-6].(?!.*SV1)";
    # Set a vary header so downstream proxies don't send cached gzipped content to IE6
    gzip_vary on;

    {% for k,v in nginx.http_core_module_config.iteritems() %}
    {{ k }} {{ v }};
    {% endfor %}

    # Load config files from the /etc/nginx/conf.d directory
    # The default server is in conf.d/default.conf
    {% if nginx.throttling.enabled -%}
    {% for zone_name, zone_data in nginx.throttling.zones.iteritems() -%}
    limit_req_zone  $binary_remote_addr  zone={{zone_name}}:10m  rate={{zone_data['rate']}};
    {%- endfor %}
    {%- endif %}

    include /etc/nginx/conf.d/*.conf;
}
